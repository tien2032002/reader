
reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001794  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018c0  080018c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018c0  080018c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018c0  080018c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018c0  080018c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018c4  080018c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080018d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080018d4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d19  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e7  00000000  00000000  00025d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  000278d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162b9  00000000  00000000  00027ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007501  00000000  00000000  0003e179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e31a  00000000  00000000  0004567a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001910  00000000  00000000  000c39e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001888 	.word	0x08001888

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001888 	.word	0x08001888

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbfc 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f828 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f898 	bl	800028c <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f860 	bl	8000220 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000160:	f000 f8ed 	bl	800033e <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!MFRC522_Request(PICC_REQIDL, str)) {
 8000164:	490e      	ldr	r1, [pc, #56]	; (80001a0 <main+0x54>)
 8000166:	2026      	movs	r0, #38	; 0x26
 8000168:	f000 f994 	bl	8000494 <MFRC522_Request>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d1f8      	bne.n	8000164 <main+0x18>
		  if (!MFRC522_Anticoll(str)){
 8000172:	480b      	ldr	r0, [pc, #44]	; (80001a0 <main+0x54>)
 8000174:	f000 fa82 	bl	800067c <MFRC522_Anticoll>
 8000178:	4603      	mov	r3, r0
 800017a:	2b00      	cmp	r3, #0
 800017c:	d1f2      	bne.n	8000164 <main+0x18>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000184:	4807      	ldr	r0, [pc, #28]	; (80001a4 <main+0x58>)
 8000186:	f000 fecf 	bl	8000f28 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800018a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018e:	f000 fc3f 	bl	8000a10 <HAL_Delay>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000198:	4802      	ldr	r0, [pc, #8]	; (80001a4 <main+0x58>)
 800019a:	f000 fec5 	bl	8000f28 <HAL_GPIO_WritePin>
	  if (!MFRC522_Request(PICC_REQIDL, str)) {
 800019e:	e7e1      	b.n	8000164 <main+0x18>
 80001a0:	20000080 	.word	0x20000080
 80001a4:	40011000 	.word	0x40011000

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	; 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 fb5e 	bl	8001878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ca:	2302      	movs	r3, #2
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ce:	2301      	movs	r3, #1
 80001d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d2:	2310      	movs	r3, #16
 80001d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d6:	2300      	movs	r3, #0
 80001d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 feba 	bl	8000f58 <HAL_RCC_OscConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ea:	f000 f8a3 	bl	8000334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	230f      	movs	r3, #15
 80001f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 f926 	bl	8001458 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000212:	f000 f88f 	bl	8000334 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <MX_SPI1_Init+0x64>)
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <MX_SPI1_Init+0x68>)
 8000228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800022a:	4b16      	ldr	r3, [pc, #88]	; (8000284 <MX_SPI1_Init+0x64>)
 800022c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <MX_SPI1_Init+0x64>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <MX_SPI1_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_SPI1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_SPI1_Init+0x64>)
 800024c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000250:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <MX_SPI1_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <MX_SPI1_Init+0x64>)
 800025a:	2200      	movs	r2, #0
 800025c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MX_SPI1_Init+0x64>)
 8000260:	2200      	movs	r2, #0
 8000262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <MX_SPI1_Init+0x64>)
 8000266:	2200      	movs	r2, #0
 8000268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MX_SPI1_Init+0x64>)
 800026c:	220a      	movs	r2, #10
 800026e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <MX_SPI1_Init+0x64>)
 8000272:	f001 fa59 	bl	8001728 <HAL_SPI_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800027c:	f000 f85a 	bl	8000334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000028 	.word	0x20000028
 8000288:	40013000 	.word	0x40013000

0800028c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0308 	add.w	r3, r7, #8
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <MX_GPIO_Init+0x9c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a20      	ldr	r2, [pc, #128]	; (8000328 <MX_GPIO_Init+0x9c>)
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <MX_GPIO_Init+0x9c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0310 	and.w	r3, r3, #16
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <MX_GPIO_Init+0x9c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a1a      	ldr	r2, [pc, #104]	; (8000328 <MX_GPIO_Init+0x9c>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b18      	ldr	r3, [pc, #96]	; (8000328 <MX_GPIO_Init+0x9c>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d6:	4815      	ldr	r0, [pc, #84]	; (800032c <MX_GPIO_Init+0xa0>)
 80002d8:	f000 fe26 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	2110      	movs	r1, #16
 80002e0:	4813      	ldr	r0, [pc, #76]	; (8000330 <MX_GPIO_Init+0xa4>)
 80002e2:	f000 fe21 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ec:	2301      	movs	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002f0:	2302      	movs	r3, #2
 80002f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f4:	2302      	movs	r3, #2
 80002f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002f8:	f107 0308 	add.w	r3, r7, #8
 80002fc:	4619      	mov	r1, r3
 80002fe:	480b      	ldr	r0, [pc, #44]	; (800032c <MX_GPIO_Init+0xa0>)
 8000300:	f000 fc8e 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000304:	2310      	movs	r3, #16
 8000306:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2302      	movs	r3, #2
 8000312:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000314:	f107 0308 	add.w	r3, r7, #8
 8000318:	4619      	mov	r1, r3
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_GPIO_Init+0xa4>)
 800031c:	f000 fc80 	bl	8000c20 <HAL_GPIO_Init>

}
 8000320:	bf00      	nop
 8000322:	3718      	adds	r7, #24
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40021000 	.word	0x40021000
 800032c:	40011000 	.word	0x40011000
 8000330:	40010800 	.word	0x40010800

08000334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000338:	b672      	cpsid	i
}
 800033a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033c:	e7fe      	b.n	800033c <Error_Handler+0x8>

0800033e <MFRC522_Init>:

#include "rc522.h"
#include "spi.h"


void MFRC522_Init(void) {
 800033e:	b580      	push	{r7, lr}
 8000340:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000342:	f000 f89f 	bl	8000484 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000346:	218d      	movs	r1, #141	; 0x8d
 8000348:	202a      	movs	r0, #42	; 0x2a
 800034a:	f000 f81c 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800034e:	213e      	movs	r1, #62	; 0x3e
 8000350:	202b      	movs	r0, #43	; 0x2b
 8000352:	f000 f818 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8000356:	211e      	movs	r1, #30
 8000358:	202d      	movs	r0, #45	; 0x2d
 800035a:	f000 f814 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800035e:	2100      	movs	r1, #0
 8000360:	202c      	movs	r0, #44	; 0x2c
 8000362:	f000 f810 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);			// 48dB gain
 8000366:	2170      	movs	r1, #112	; 0x70
 8000368:	2026      	movs	r0, #38	; 0x26
 800036a:	f000 f80c 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800036e:	2140      	movs	r1, #64	; 0x40
 8000370:	2015      	movs	r0, #21
 8000372:	f000 f808 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000376:	213d      	movs	r1, #61	; 0x3d
 8000378:	2011      	movs	r0, #17
 800037a:	f000 f804 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();										// Open the antenna
 800037e:	f000 f86c 	bl	800045a <MFRC522_AntennaOn>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}

08000386 <MFRC522_WriteRegister>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000386:	b580      	push	{r7, lr}
 8000388:	b082      	sub	sp, #8
 800038a:	af00      	add	r7, sp, #0
 800038c:	4603      	mov	r3, r0
 800038e:	460a      	mov	r2, r1
 8000390:	71fb      	strb	r3, [r7, #7]
 8000392:	4613      	mov	r3, r2
 8000394:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;																		// Address format: 0XXXXXX0
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	b2db      	uxtb	r3, r3
 800039c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80003a0:	71fb      	strb	r3, [r7, #7]
    SPI1_WriteReg(addr, val);
 80003a2:	79ba      	ldrb	r2, [r7, #6]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4611      	mov	r1, r2
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f9c5 	bl	8000738 <SPI1_WriteReg>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b084      	sub	sp, #16
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	b25b      	sxtb	r3, r3
 80003c6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f9cc 	bl	8000774 <SPI1_ReadReg>
 80003dc:	4603      	mov	r3, r0
 80003de:	73fb      	strb	r3, [r7, #15]
	return val;
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b082      	sub	sp, #8
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	4603      	mov	r3, r0
 80003f2:	460a      	mov	r2, r1
 80003f4:	71fb      	strb	r3, [r7, #7]
 80003f6:	4613      	mov	r3, r2
 80003f8:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ffda 	bl	80003b6 <MFRC522_ReadRegister>
 8000402:	4603      	mov	r3, r0
 8000404:	461a      	mov	r2, r3
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	4313      	orrs	r3, r2
 800040a:	b2da      	uxtb	r2, r3
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ffb8 	bl	8000386 <MFRC522_WriteRegister>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
 8000424:	4603      	mov	r3, r0
 8000426:	460a      	mov	r2, r1
 8000428:	71fb      	strb	r3, [r7, #7]
 800042a:	4613      	mov	r3, r2
 800042c:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ffc0 	bl	80003b6 <MFRC522_ReadRegister>
 8000436:	4603      	mov	r3, r0
 8000438:	b25a      	sxtb	r2, r3
 800043a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800043e:	43db      	mvns	r3, r3
 8000440:	b25b      	sxtb	r3, r3
 8000442:	4013      	ands	r3, r2
 8000444:	b25b      	sxtb	r3, r3
 8000446:	b2da      	uxtb	r2, r3
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4611      	mov	r1, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff9a 	bl	8000386 <MFRC522_WriteRegister>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000460:	2014      	movs	r0, #20
 8000462:	f7ff ffa8 	bl	80003b6 <MFRC522_ReadRegister>
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f003 0303 	and.w	r3, r3, #3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d103      	bne.n	800047c <MFRC522_AntennaOn+0x22>
 8000474:	2103      	movs	r1, #3
 8000476:	2014      	movs	r0, #20
 8000478:	f7ff ffb7 	bl	80003ea <MFRC522_SetBitMask>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <MFRC522_Reset>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Reset(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000488:	210f      	movs	r1, #15
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff ff7b 	bl	8000386 <MFRC522_WriteRegister>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t * TagType) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																				// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);											// TxLastBists = BitFramingReg[2..0]
 80004a0:	2107      	movs	r1, #7
 80004a2:	200d      	movs	r0, #13
 80004a4:	f7ff ff6f 	bl	8000386 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	79fa      	ldrb	r2, [r7, #7]
 80004ac:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	2201      	movs	r2, #1
 80004b8:	6839      	ldr	r1, [r7, #0]
 80004ba:	200c      	movs	r0, #12
 80004bc:	f000 f80f 	bl	80004de <MFRC522_ToCard>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d102      	bne.n	80004d0 <MFRC522_Request+0x3c>
 80004ca:	89bb      	ldrh	r3, [r7, #12]
 80004cc:	2b10      	cmp	r3, #16
 80004ce:	d001      	beq.n	80004d4 <MFRC522_Request+0x40>
 80004d0:	2302      	movs	r3, #2
 80004d2:	73fb      	strb	r3, [r7, #15]
	return status;
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t * sendData, uint8_t sendLen, uint8_t * backData, uint16_t * backLen) {
 80004de:	b590      	push	{r4, r7, lr}
 80004e0:	b087      	sub	sp, #28
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80004f0:	2302      	movs	r3, #2
 80004f2:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80004f4:	2300      	movs	r3, #0
 80004f6:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80004f8:	2300      	movs	r3, #0
 80004fa:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	2b0c      	cmp	r3, #12
 8000500:	d006      	beq.n	8000510 <MFRC522_ToCard+0x32>
 8000502:	2b0e      	cmp	r3, #14
 8000504:	d109      	bne.n	800051a <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000506:	2312      	movs	r3, #18
 8000508:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800050a:	2310      	movs	r3, #16
 800050c:	757b      	strb	r3, [r7, #21]
			break;
 800050e:	e005      	b.n	800051c <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000510:	2377      	movs	r3, #119	; 0x77
 8000512:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000514:	2330      	movs	r3, #48	; 0x30
 8000516:	757b      	strb	r3, [r7, #21]
			break;
 8000518:	e000      	b.n	800051c <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800051a:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800051c:	7dbb      	ldrb	r3, [r7, #22]
 800051e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	2002      	movs	r0, #2
 8000528:	f7ff ff2d 	bl	8000386 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	2004      	movs	r0, #4
 8000530:	f7ff ff75 	bl	800041e <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	200a      	movs	r0, #10
 8000538:	f7ff ff57 	bl	80003ea <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800053c:	2100      	movs	r1, #0
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff ff21 	bl	8000386 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000544:	2300      	movs	r3, #0
 8000546:	827b      	strh	r3, [r7, #18]
 8000548:	e00a      	b.n	8000560 <MFRC522_ToCard+0x82>
 800054a:	8a7b      	ldrh	r3, [r7, #18]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	4413      	add	r3, r2
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4619      	mov	r1, r3
 8000554:	2009      	movs	r0, #9
 8000556:	f7ff ff16 	bl	8000386 <MFRC522_WriteRegister>
 800055a:	8a7b      	ldrh	r3, [r7, #18]
 800055c:	3301      	adds	r3, #1
 800055e:	827b      	strh	r3, [r7, #18]
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	b29b      	uxth	r3, r3
 8000564:	8a7a      	ldrh	r2, [r7, #18]
 8000566:	429a      	cmp	r2, r3
 8000568:	d3ef      	bcc.n	800054a <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	4619      	mov	r1, r3
 800056e:	2001      	movs	r0, #1
 8000570:	f7ff ff09 	bl	8000386 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);					// StartSend=1,transmission of data starts
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b0c      	cmp	r3, #12
 8000578:	d103      	bne.n	8000582 <MFRC522_ToCard+0xa4>
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	200d      	movs	r0, #13
 800057e:	f7ff ff34 	bl	80003ea <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000582:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000586:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000588:	2004      	movs	r0, #4
 800058a:	f7ff ff14 	bl	80003b6 <MFRC522_ReadRegister>
 800058e:	4603      	mov	r3, r0
 8000590:	753b      	strb	r3, [r7, #20]
		i--;
 8000592:	8a7b      	ldrh	r3, [r7, #18]
 8000594:	3b01      	subs	r3, #1
 8000596:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000598:	8a7b      	ldrh	r3, [r7, #18]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <MFRC522_ToCard+0xd6>
 800059e:	7d3b      	ldrb	r3, [r7, #20]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d105      	bne.n	80005b4 <MFRC522_ToCard+0xd6>
 80005a8:	7d3a      	ldrb	r2, [r7, #20]
 80005aa:	7d7b      	ldrb	r3, [r7, #21]
 80005ac:	4013      	ands	r3, r2
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0e9      	beq.n	8000588 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);												// StartSend=0
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	200d      	movs	r0, #13
 80005b8:	f7ff ff31 	bl	800041e <MFRC522_ClearBitMask>

	if (i != 0)  {
 80005bc:	8a7b      	ldrh	r3, [r7, #18]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d057      	beq.n	8000672 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80005c2:	2006      	movs	r0, #6
 80005c4:	f7ff fef7 	bl	80003b6 <MFRC522_ReadRegister>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f003 031b 	and.w	r3, r3, #27
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d14d      	bne.n	800066e <MFRC522_ToCard+0x190>
			status = MI_OK;
 80005d2:	2300      	movs	r3, #0
 80005d4:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 80005d6:	7d3a      	ldrb	r2, [r7, #20]
 80005d8:	7dbb      	ldrb	r3, [r7, #22]
 80005da:	4013      	ands	r3, r2
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MFRC522_ToCard+0x10c>
 80005e6:	2301      	movs	r3, #1
 80005e8:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2b0c      	cmp	r3, #12
 80005ee:	d140      	bne.n	8000672 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80005f0:	200a      	movs	r0, #10
 80005f2:	f7ff fee0 	bl	80003b6 <MFRC522_ReadRegister>
 80005f6:	4603      	mov	r3, r0
 80005f8:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80005fa:	200c      	movs	r0, #12
 80005fc:	f7ff fedb 	bl	80003b6 <MFRC522_ReadRegister>
 8000600:	4603      	mov	r3, r0
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n - 1) * 8 + lastBits; else *backLen = n * 8;
 8000608:	7c7b      	ldrb	r3, [r7, #17]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00b      	beq.n	8000626 <MFRC522_ToCard+0x148>
 800060e:	7d3b      	ldrb	r3, [r7, #20]
 8000610:	3b01      	subs	r3, #1
 8000612:	b29b      	uxth	r3, r3
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	b29a      	uxth	r2, r3
 8000618:	7c7b      	ldrb	r3, [r7, #17]
 800061a:	b29b      	uxth	r3, r3
 800061c:	4413      	add	r3, r2
 800061e:	b29a      	uxth	r2, r3
 8000620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000622:	801a      	strh	r2, [r3, #0]
 8000624:	e005      	b.n	8000632 <MFRC522_ToCard+0x154>
 8000626:	7d3b      	ldrb	r3, [r7, #20]
 8000628:	b29b      	uxth	r3, r3
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	b29a      	uxth	r2, r3
 800062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000630:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000632:	7d3b      	ldrb	r3, [r7, #20]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <MFRC522_ToCard+0x15e>
 8000638:	2301      	movs	r3, #1
 800063a:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800063c:	7d3b      	ldrb	r3, [r7, #20]
 800063e:	2b10      	cmp	r3, #16
 8000640:	d901      	bls.n	8000646 <MFRC522_ToCard+0x168>
 8000642:	2310      	movs	r3, #16
 8000644:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000646:	2300      	movs	r3, #0
 8000648:	827b      	strh	r3, [r7, #18]
 800064a:	e00a      	b.n	8000662 <MFRC522_ToCard+0x184>
 800064c:	8a7b      	ldrh	r3, [r7, #18]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	18d4      	adds	r4, r2, r3
 8000652:	2009      	movs	r0, #9
 8000654:	f7ff feaf 	bl	80003b6 <MFRC522_ReadRegister>
 8000658:	4603      	mov	r3, r0
 800065a:	7023      	strb	r3, [r4, #0]
 800065c:	8a7b      	ldrh	r3, [r7, #18]
 800065e:	3301      	adds	r3, #1
 8000660:	827b      	strh	r3, [r7, #18]
 8000662:	7d3b      	ldrb	r3, [r7, #20]
 8000664:	b29b      	uxth	r3, r3
 8000666:	8a7a      	ldrh	r2, [r7, #18]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ef      	bcc.n	800064c <MFRC522_ToCard+0x16e>
 800066c:	e001      	b.n	8000672 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800066e:	2302      	movs	r3, #2
 8000670:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000672:	7dfb      	ldrb	r3, [r7, #23]
}
 8000674:	4618      	mov	r0, r3
 8000676:	371c      	adds	r7, #28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}

0800067c <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t * serNum) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000688:	2100      	movs	r1, #0
 800068a:	200d      	movs	r0, #13
 800068c:	f7ff fe7b 	bl	8000386 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2293      	movs	r2, #147	; 0x93
 8000694:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	2220      	movs	r2, #32
 800069c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800069e:	f107 030a 	add.w	r3, r7, #10
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2202      	movs	r2, #2
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	200c      	movs	r0, #12
 80006ac:	f7ff ff17 	bl	80004de <MFRC522_ToCard>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d118      	bne.n	80006ec <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80006ba:	2300      	movs	r3, #0
 80006bc:	73bb      	strb	r3, [r7, #14]
 80006be:	e009      	b.n	80006d4 <MFRC522_Anticoll+0x58>
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	4053      	eors	r3, r2
 80006cc:	737b      	strb	r3, [r7, #13]
 80006ce:	7bbb      	ldrb	r3, [r7, #14]
 80006d0:	3301      	adds	r3, #1
 80006d2:	73bb      	strb	r3, [r7, #14]
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d9f2      	bls.n	80006c0 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d001      	beq.n	80006ec <MFRC522_Anticoll+0x70>
 80006e8:	2302      	movs	r3, #2
 80006ea:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <SPI1SendByte>:
//	SPI1->CR1 |= SPI_CR1_DFF; 		// 16 áèò äàííûõ
//	SPI1->CR1 &= ~SPI_CR1_LSBFIRST;	// Ìëàäøèé áèò (MSB) ïåðåäàåòñÿ ïåðâûì
//	SPI1->CR2 |= SPI_CR2_SSOE; 		// NSS - èñïîëüçóåòñÿ êàê âûõîä óïðàâëåíèÿ slave select
}

uint8_t SPI1SendByte(uint8_t data) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	while (!(SPI1->SR & SPI_SR_TXE));      				// óáåäèòüñÿ, ÷òî ïðåäûäóùàÿ ïåðåäà÷à çàâåðøåíà (STM32F103)
 8000702:	bf00      	nop
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <SPI1SendByte+0x3c>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f9      	beq.n	8000704 <SPI1SendByte+0xc>
	SPI1->DR=data;										// âûâîä â SPI1
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <SPI1SendByte+0x3c>)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	60d3      	str	r3, [r2, #12]
	while (!(SPI1->SR & SPI_SR_RXNE));     				// æäåì îêîí÷àíèÿ îáìåíà (STM32F103)
 8000716:	bf00      	nop
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <SPI1SendByte+0x3c>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <SPI1SendByte+0x20>
	return SPI1->DR;		         					// ÷èòàåì ïðèíÿòûå äàííûå
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <SPI1SendByte+0x3c>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	b2db      	uxtb	r3, r3
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40013000 	.word	0x40013000

08000738 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	460a      	mov	r2, r1
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	4613      	mov	r3, r2
 8000746:	71bb      	strb	r3, [r7, #6]
	SPI1_NSS_ON();										// CS_Low
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <SPI1_WriteReg+0x38>)
 800074a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800074e:	611a      	str	r2, [r3, #16]
	SPI1SendByte(address);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffd0 	bl	80006f8 <SPI1SendByte>
	SPI1SendByte(value);
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffcc 	bl	80006f8 <SPI1SendByte>
	SPI1_NSS_OFF();										// CS_HIGH
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <SPI1_WriteReg+0x38>)
 8000762:	2210      	movs	r2, #16
 8000764:	611a      	str	r2, [r3, #16]
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40010800 	.word	0x40010800

08000774 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	SPI1_NSS_ON();										// CS_Low
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <SPI1_ReadReg+0x34>)
 8000780:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000784:	611a      	str	r2, [r3, #16]
	SPI1SendByte(address);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffb5 	bl	80006f8 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ffb2 	bl	80006f8 <SPI1SendByte>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
	SPI1_NSS_OFF();										// CS_HIGH
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <SPI1_ReadReg+0x34>)
 800079a:	2210      	movs	r2, #16
 800079c:	611a      	str	r2, [r3, #16]
	return val;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40010800 	.word	0x40010800

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_MspInit+0x5c>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <HAL_MspInit+0x5c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_MspInit+0x5c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_MspInit+0x5c>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_MspInit+0x5c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_MspInit+0x5c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_MspInit+0x60>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_MspInit+0x60>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	40021000 	.word	0x40021000
 800080c:	40010000 	.word	0x40010000

08000810 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <HAL_SPI_MspInit+0x88>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d12f      	bne.n	8000890 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_SPI_MspInit+0x8c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <HAL_SPI_MspInit+0x8c>)
 8000836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_SPI_MspInit+0x8c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_SPI_MspInit+0x8c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a13      	ldr	r2, [pc, #76]	; (800089c <HAL_SPI_MspInit+0x8c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_SPI_MspInit+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000860:	23a0      	movs	r3, #160	; 0xa0
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <HAL_SPI_MspInit+0x90>)
 8000874:	f000 f9d4 	bl	8000c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_SPI_MspInit+0x90>)
 800088c:	f000 f9c8 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013000 	.word	0x40013000
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f875 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
	...

08000900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000926:	f7ff ffe4 	bl	80008f2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092a:	f000 ff81 	bl	8001830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff fc0d 	bl	800014c <main>
  bx lr
 8000932:	4770      	bx	lr
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	080018c8 	.word	0x080018c8
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	20000094 	.word	0x20000094

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f92b 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff ff20 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f935 	bl	8000c06 <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f90b 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000090 	.word	0x20000090

080009fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000090 	.word	0x20000090

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff0 	bl	80009fc <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_Delay+0x44>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a36:	bf00      	nop
 8000a38:	f7ff ffe0 	bl	80009fc <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f7ff ff90 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff49 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff5e 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff90 	bl	8000b10 <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5f 	bl	8000abc <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffb0 	bl	8000b74 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	e169      	b.n	8000f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c34:	2201      	movs	r2, #1
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8158 	bne.w	8000f02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a9a      	ldr	r2, [pc, #616]	; (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d05e      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c5c:	4a98      	ldr	r2, [pc, #608]	; (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d875      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c62:	4a98      	ldr	r2, [pc, #608]	; (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d058      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c68:	4a96      	ldr	r2, [pc, #600]	; (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d86f      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c6e:	4a96      	ldr	r2, [pc, #600]	; (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d052      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c74:	4a94      	ldr	r2, [pc, #592]	; (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d869      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c7a:	4a94      	ldr	r2, [pc, #592]	; (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d04c      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c80:	4a92      	ldr	r2, [pc, #584]	; (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d863      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c86:	4a92      	ldr	r2, [pc, #584]	; (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d046      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c8c:	4a90      	ldr	r2, [pc, #576]	; (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d85d      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d82a      	bhi.n	8000cec <HAL_GPIO_Init+0xcc>
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d859      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <HAL_GPIO_Init+0x80>)
 8000c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca0:	08000d1b 	.word	0x08000d1b
 8000ca4:	08000cf5 	.word	0x08000cf5
 8000ca8:	08000d07 	.word	0x08000d07
 8000cac:	08000d49 	.word	0x08000d49
 8000cb0:	08000d4f 	.word	0x08000d4f
 8000cb4:	08000d4f 	.word	0x08000d4f
 8000cb8:	08000d4f 	.word	0x08000d4f
 8000cbc:	08000d4f 	.word	0x08000d4f
 8000cc0:	08000d4f 	.word	0x08000d4f
 8000cc4:	08000d4f 	.word	0x08000d4f
 8000cc8:	08000d4f 	.word	0x08000d4f
 8000ccc:	08000d4f 	.word	0x08000d4f
 8000cd0:	08000d4f 	.word	0x08000d4f
 8000cd4:	08000d4f 	.word	0x08000d4f
 8000cd8:	08000d4f 	.word	0x08000d4f
 8000cdc:	08000d4f 	.word	0x08000d4f
 8000ce0:	08000d4f 	.word	0x08000d4f
 8000ce4:	08000cfd 	.word	0x08000cfd
 8000ce8:	08000d11 	.word	0x08000d11
 8000cec:	4a79      	ldr	r2, [pc, #484]	; (8000ed4 <HAL_GPIO_Init+0x2b4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf2:	e02c      	b.n	8000d4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e029      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	3304      	adds	r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e024      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e01f      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	330c      	adds	r3, #12
 8000d16:	623b      	str	r3, [r7, #32]
          break;
 8000d18:	e01a      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d22:	2304      	movs	r3, #4
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e013      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d105      	bne.n	8000d3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d30:	2308      	movs	r3, #8
 8000d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	611a      	str	r2, [r3, #16]
          break;
 8000d3a:	e009      	b.n	8000d50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	615a      	str	r2, [r3, #20]
          break;
 8000d46:	e003      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          break;
 8000d4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2bff      	cmp	r3, #255	; 0xff
 8000d54:	d801      	bhi.n	8000d5a <HAL_GPIO_Init+0x13a>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	e001      	b.n	8000d5e <HAL_GPIO_Init+0x13e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2bff      	cmp	r3, #255	; 0xff
 8000d64:	d802      	bhi.n	8000d6c <HAL_GPIO_Init+0x14c>
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x152>
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	3b08      	subs	r3, #8
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	210f      	movs	r1, #15
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	6a39      	ldr	r1, [r7, #32]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80b1 	beq.w	8000f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000db8:	4a48      	ldr	r2, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x2bc>)
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_GPIO_Init+0x2c0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3f      	ldr	r2, [pc, #252]	; (8000ee4 <HAL_GPIO_Init+0x2c4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1e8>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a3e      	ldr	r2, [pc, #248]	; (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1e0>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e004      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1e:	492f      	ldr	r1, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x2bc>)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	492c      	ldr	r1, [pc, #176]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4928      	ldr	r1, [pc, #160]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4922      	ldr	r1, [pc, #136]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	491e      	ldr	r1, [pc, #120]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	4918      	ldr	r1, [pc, #96]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d021      	beq.n	8000ef4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60cb      	str	r3, [r1, #12]
 8000ebc:	e021      	b.n	8000f02 <HAL_GPIO_Init+0x2e2>
 8000ebe:	bf00      	nop
 8000ec0:	10320000 	.word	0x10320000
 8000ec4:	10310000 	.word	0x10310000
 8000ec8:	10220000 	.word	0x10220000
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10120000 	.word	0x10120000
 8000ed4:	10110000 	.word	0x10110000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40011400 	.word	0x40011400
 8000ef0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4909      	ldr	r1, [pc, #36]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	3301      	adds	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f ae8e 	bne.w	8000c34 <HAL_GPIO_Init+0x14>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f44:	e003      	b.n	8000f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	611a      	str	r2, [r3, #16]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e26c      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8087 	beq.w	8001086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f78:	4b92      	ldr	r3, [pc, #584]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d00c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f84:	4b8f      	ldr	r3, [pc, #572]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d112      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
 8000f90:	4b8c      	ldr	r3, [pc, #560]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	4b89      	ldr	r3, [pc, #548]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d06c      	beq.n	8001084 <HAL_RCC_OscConfig+0x12c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d168      	bne.n	8001084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e246      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d106      	bne.n	8000fce <HAL_RCC_OscConfig+0x76>
 8000fc0:	4b80      	ldr	r3, [pc, #512]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a7f      	ldr	r2, [pc, #508]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e02e      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x98>
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7a      	ldr	r2, [pc, #488]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b78      	ldr	r3, [pc, #480]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a77      	ldr	r2, [pc, #476]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e01d      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0xbc>
 8000ffa:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a71      	ldr	r2, [pc, #452]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6e      	ldr	r2, [pc, #440]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a6a      	ldr	r2, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a67      	ldr	r2, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fce2 	bl	80009fc <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcde 	bl	80009fc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1fa      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xe4>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fcce 	bl	80009fc <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fcca 	bl	80009fc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1e6      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x10c>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d063      	beq.n	800115a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d11c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1ba      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4939      	ldr	r1, [pc, #228]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	e03a      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_RCC_OscConfig+0x270>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc83 	bl	80009fc <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc7f 	bl	80009fc <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e19b      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4927      	ldr	r1, [pc, #156]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e015      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_RCC_OscConfig+0x270>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fc62 	bl	80009fc <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc5e 	bl	80009fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e17a      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d03a      	beq.n	80011dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d019      	beq.n	80011a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_RCC_OscConfig+0x274>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fc42 	bl	80009fc <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc3e 	bl	80009fc <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e15a      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 faa6 	bl	80016ec <RCC_Delay>
 80011a0:	e01c      	b.n	80011dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_RCC_OscConfig+0x274>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc28 	bl	80009fc <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ae:	e00f      	b.n	80011d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc24 	bl	80009fc <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d908      	bls.n	80011d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e140      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	42420000 	.word	0x42420000
 80011cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b9e      	ldr	r3, [pc, #632]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e9      	bne.n	80011b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a6 	beq.w	8001336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b97      	ldr	r3, [pc, #604]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b94      	ldr	r3, [pc, #592]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a93      	ldr	r2, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b91      	ldr	r3, [pc, #580]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001216:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001222:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a8a      	ldr	r2, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122e:	f7ff fbe5 	bl	80009fc <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fbe1 	bl	80009fc <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	; 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e0fd      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x312>
 800125c:	4b7b      	ldr	r3, [pc, #492]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a7a      	ldr	r2, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e02d      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x334>
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a75      	ldr	r2, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	4b73      	ldr	r3, [pc, #460]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a72      	ldr	r2, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	e01c      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d10c      	bne.n	80012ae <HAL_RCC_OscConfig+0x356>
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a6c      	ldr	r2, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	4b6a      	ldr	r3, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a69      	ldr	r2, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	e00b      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a66      	ldr	r2, [pc, #408]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	4b64      	ldr	r3, [pc, #400]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a63      	ldr	r2, [pc, #396]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d015      	beq.n	80012fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fb95 	bl	80009fc <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fb91 	bl	80009fc <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0ab      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	4b57      	ldr	r3, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ee      	beq.n	80012d6 <HAL_RCC_OscConfig+0x37e>
 80012f8:	e014      	b.n	8001324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb7f 	bl	80009fc <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fb7b 	bl	80009fc <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e095      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ee      	bne.n	8001302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a47      	ldr	r2, [pc, #284]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8081 	beq.w	8001442 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001340:	4b42      	ldr	r3, [pc, #264]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d061      	beq.n	8001410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d146      	bne.n	80013e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x4fc>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb4f 	bl	80009fc <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb4b 	bl	80009fc <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e067      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d108      	bne.n	800139c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	492d      	ldr	r1, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a19      	ldr	r1, [r3, #32]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	430b      	orrs	r3, r1
 80013ae:	4927      	ldr	r1, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x4fc>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb1f 	bl	80009fc <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb1b 	bl	80009fc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e037      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x46a>
 80013e0:	e02f      	b.n	8001442 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_RCC_OscConfig+0x4fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb08 	bl	80009fc <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb04 	bl	80009fc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e020      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x498>
 800140e:	e018      	b.n	8001442 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e013      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	429a      	cmp	r2, r3
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	40007000 	.word	0x40007000
 8001454:	42420060 	.word	0x42420060

08001458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0d0      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d910      	bls.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b67      	ldr	r3, [pc, #412]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 0207 	bic.w	r2, r3, #7
 8001482:	4965      	ldr	r1, [pc, #404]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b8      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b4:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a58      	ldr	r2, [pc, #352]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d8:	4b50      	ldr	r3, [pc, #320]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	494d      	ldr	r1, [pc, #308]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d040      	beq.n	8001578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d115      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e07f      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e073      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e06b      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4936      	ldr	r1, [pc, #216]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001548:	f7ff fa58 	bl	80009fc <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	e00a      	b.n	8001566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff fa54 	bl	80009fc <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e053      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 020c 	and.w	r2, r3, #12
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d1eb      	bne.n	8001550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d210      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0207 	bic.w	r2, r3, #7
 800158e:	4922      	ldr	r1, [pc, #136]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e032      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4916      	ldr	r1, [pc, #88]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	490e      	ldr	r1, [pc, #56]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e6:	f000 f821 	bl	800162c <HAL_RCC_GetSysClockFreq>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	490a      	ldr	r1, [pc, #40]	; (8001620 <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	5ccb      	ldrb	r3, [r1, r3]
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1cc>)
 8001600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_ClockConfig+0x1d0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f9b6 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40022000 	.word	0x40022000
 800161c:	40021000 	.word	0x40021000
 8001620:	080018b0 	.word	0x080018b0
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800162c:	b490      	push	{r4, r7}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001634:	1d3c      	adds	r4, r7, #4
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800163c:	f240 2301 	movw	r3, #513	; 0x201
 8001640:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x40>
 8001666:	2b08      	cmp	r3, #8
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x46>
 800166a:	e02d      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800166e:	623b      	str	r3, [r7, #32]
      break;
 8001670:	e02d      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800167e:	4413      	add	r3, r2
 8001680:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001684:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	0c5b      	lsrs	r3, r3, #17
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800169e:	4413      	add	r3, r2
 80016a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016aa:	fb02 f203 	mul.w	r2, r2, r3
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
 80016b6:	e004      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	623b      	str	r3, [r7, #32]
      break;
 80016c6:	e002      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ca:	623b      	str	r3, [r7, #32]
      break;
 80016cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ce:	6a3b      	ldr	r3, [r7, #32]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc90      	pop	{r4, r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	080018a0 	.word	0x080018a0
 80016e0:	40021000 	.word	0x40021000
 80016e4:	007a1200 	.word	0x007a1200
 80016e8:	003d0900 	.word	0x003d0900

080016ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <RCC_Delay+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <RCC_Delay+0x38>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0a5b      	lsrs	r3, r3, #9
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001708:	bf00      	nop
  }
  while (Delay --);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	60fa      	str	r2, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f9      	bne.n	8001708 <RCC_Delay+0x1c>
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000
 8001724:	10624dd3 	.word	0x10624dd3

08001728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e076      	b.n	8001828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800174a:	d009      	beq.n	8001760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
 8001752:	e005      	b.n	8001760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff f848 	bl	8000810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e4:	ea42 0103 	orr.w	r1, r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	0c1a      	lsrs	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f002 0204 	and.w	r2, r2, #4
 8001806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <__libc_init_array>:
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	2600      	movs	r6, #0
 8001834:	4d0c      	ldr	r5, [pc, #48]	; (8001868 <__libc_init_array+0x38>)
 8001836:	4c0d      	ldr	r4, [pc, #52]	; (800186c <__libc_init_array+0x3c>)
 8001838:	1b64      	subs	r4, r4, r5
 800183a:	10a4      	asrs	r4, r4, #2
 800183c:	42a6      	cmp	r6, r4
 800183e:	d109      	bne.n	8001854 <__libc_init_array+0x24>
 8001840:	f000 f822 	bl	8001888 <_init>
 8001844:	2600      	movs	r6, #0
 8001846:	4d0a      	ldr	r5, [pc, #40]	; (8001870 <__libc_init_array+0x40>)
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <__libc_init_array+0x44>)
 800184a:	1b64      	subs	r4, r4, r5
 800184c:	10a4      	asrs	r4, r4, #2
 800184e:	42a6      	cmp	r6, r4
 8001850:	d105      	bne.n	800185e <__libc_init_array+0x2e>
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	f855 3b04 	ldr.w	r3, [r5], #4
 8001858:	4798      	blx	r3
 800185a:	3601      	adds	r6, #1
 800185c:	e7ee      	b.n	800183c <__libc_init_array+0xc>
 800185e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001862:	4798      	blx	r3
 8001864:	3601      	adds	r6, #1
 8001866:	e7f2      	b.n	800184e <__libc_init_array+0x1e>
 8001868:	080018c0 	.word	0x080018c0
 800186c:	080018c0 	.word	0x080018c0
 8001870:	080018c0 	.word	0x080018c0
 8001874:	080018c4 	.word	0x080018c4

08001878 <memset>:
 8001878:	4603      	mov	r3, r0
 800187a:	4402      	add	r2, r0
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <memset+0xa>
 8001880:	4770      	bx	lr
 8001882:	f803 1b01 	strb.w	r1, [r3], #1
 8001886:	e7f9      	b.n	800187c <memset+0x4>

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr
