
reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d8  080023d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080023d8  080023d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023d8  080023d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080023e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  08002450  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002450  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008308  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001982  00000000  00000000  000283a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fb6  00000000  00000000  0002aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081be  00000000  00000000  00041a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c5a  00000000  00000000  00049c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb86e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d18  00000000  00000000  000cb8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080023a0 	.word	0x080023a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080023a0 	.word	0x080023a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd15 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82f 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f89f 	bl	800029c <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f867 	bl	8000230 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Name* RFID=malloc(sizeof(MFRC522_Name));
 8000162:	2010      	movs	r0, #16
 8000164:	f002 f894 	bl	8002290 <malloc>
 8000168:	4603      	mov	r3, r0
 800016a:	607b      	str	r3, [r7, #4]

  MFRC522_Init(RFID, &hspi1, CS_RFID_GPIO_Port, CS_RFID_Pin);
 800016c:	2310      	movs	r3, #16
 800016e:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <main+0x5c>)
 8000170:	490e      	ldr	r1, [pc, #56]	; (80001ac <main+0x60>)
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f000 f9d8 	bl	8000528 <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	 if (MFRC522_Check(RFID, str)==MI_OK) {
 8000178:	490d      	ldr	r1, [pc, #52]	; (80001b0 <main+0x64>)
 800017a:	6878      	ldr	r0, [r7, #4]
 800017c:	f000 fa11 	bl	80005a2 <MFRC522_Check>
 8000180:	4603      	mov	r3, r0
 8000182:	2b00      	cmp	r3, #0
 8000184:	d1f8      	bne.n	8000178 <main+0x2c>
  		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018c:	4809      	ldr	r0, [pc, #36]	; (80001b4 <main+0x68>)
 800018e:	f001 f885 	bl	800129c <HAL_GPIO_WritePin>
  		 HAL_Delay(1000);
 8000192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000196:	f000 fd55 	bl	8000c44 <HAL_Delay>
  		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <main+0x68>)
 80001a2:	f001 f87b 	bl	800129c <HAL_GPIO_WritePin>
  	 if (MFRC522_Check(RFID, str)==MI_OK) {
 80001a6:	e7e7      	b.n	8000178 <main+0x2c>
 80001a8:	40010800 	.word	0x40010800
 80001ac:	20000098 	.word	0x20000098
 80001b0:	200000f0 	.word	0x200000f0
 80001b4:	40011000 	.word	0x40011000

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b090      	sub	sp, #64	; 0x40
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	2228      	movs	r2, #40	; 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 f86a 	bl	80022a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]
 80001d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001da:	2302      	movs	r3, #2
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e2:	2310      	movs	r3, #16
 80001e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e6:	2300      	movs	r3, #0
 80001e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 f86c 	bl	80012cc <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001fa:	f000 f8a3 	bl	8000344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000202:	2300      	movs	r3, #0
 8000204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fad8 	bl	80017cc <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000222:	f000 f88f 	bl	8000344 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3740      	adds	r7, #64	; 0x40
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_SPI1_Init+0x64>)
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <MX_SPI1_Init+0x68>)
 8000238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <MX_SPI1_Init+0x64>)
 800023c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_SPI1_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <MX_SPI1_Init+0x64>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_SPI1_Init+0x64>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <MX_SPI1_Init+0x64>)
 8000256:	2200      	movs	r2, #0
 8000258:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_SPI1_Init+0x64>)
 800025c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000260:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_SPI1_Init+0x64>)
 8000264:	2210      	movs	r2, #16
 8000266:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <MX_SPI1_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_SPI1_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <MX_SPI1_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_SPI1_Init+0x64>)
 800027c:	220a      	movs	r2, #10
 800027e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_SPI1_Init+0x64>)
 8000282:	f001 fc0b 	bl	8001a9c <HAL_SPI_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800028c:	f000 f85a 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000098 	.word	0x20000098
 8000298:	40013000 	.word	0x40013000

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b21      	ldr	r3, [pc, #132]	; (8000338 <MX_GPIO_Init+0x9c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a20      	ldr	r2, [pc, #128]	; (8000338 <MX_GPIO_Init+0x9c>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <MX_GPIO_Init+0x9c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_GPIO_Init+0x9c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a1a      	ldr	r2, [pc, #104]	; (8000338 <MX_GPIO_Init+0x9c>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_GPIO_Init+0x9c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	603b      	str	r3, [r7, #0]
 80002de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	4815      	ldr	r0, [pc, #84]	; (800033c <MX_GPIO_Init+0xa0>)
 80002e8:	f000 ffd8 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_RFID_GPIO_Port, CS_RFID_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2110      	movs	r1, #16
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <MX_GPIO_Init+0xa4>)
 80002f2:	f000 ffd3 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000300:	2302      	movs	r3, #2
 8000302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000304:	2302      	movs	r3, #2
 8000306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	4619      	mov	r1, r3
 800030e:	480b      	ldr	r0, [pc, #44]	; (800033c <MX_GPIO_Init+0xa0>)
 8000310:	f000 fe40 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_RFID_Pin */
  GPIO_InitStruct.Pin = CS_RFID_Pin;
 8000314:	2310      	movs	r3, #16
 8000316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	2301      	movs	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	2302      	movs	r3, #2
 8000322:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_RFID_GPIO_Port, &GPIO_InitStruct);
 8000324:	f107 0308 	add.w	r3, r7, #8
 8000328:	4619      	mov	r1, r3
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_GPIO_Init+0xa4>)
 800032c:	f000 fe32 	bl	8000f94 <HAL_GPIO_Init>

}
 8000330:	bf00      	nop
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000
 800033c:	40011000 	.word	0x40011000
 8000340:	40010800 	.word	0x40010800

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <Error_Handler+0x8>

0800034e <MFRC522_CS>:


#include "RC522.h"

static void MFRC522_CS(MFRC522_Name* MFRC522, uint8_t Value)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	460b      	mov	r3, r1
 8000358:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(MFRC522->CS_PORT, MFRC522->CS_PIN, Value);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6858      	ldr	r0, [r3, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	891b      	ldrh	r3, [r3, #8]
 8000362:	78fa      	ldrb	r2, [r7, #3]
 8000364:	4619      	mov	r1, r3
 8000366:	f000 ff99 	bl	800129c <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <TM_SPI_Send>:
static uint8_t TM_SPI_Send(MFRC522_Name* MFRC522, uint8_t data)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b086      	sub	sp, #24
 8000376:	af02      	add	r7, sp, #8
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	460b      	mov	r3, r1
 800037c:	70fb      	strb	r3, [r7, #3]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(MFRC522->SPI, SPI_FLAG_TXE));
 8000382:	bf00      	nop
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	f003 0302 	and.w	r3, r3, #2
 8000390:	2b02      	cmp	r3, #2
 8000392:	d1f7      	bne.n	8000384 <TM_SPI_Send+0x12>
	HAL_SPI_TransmitReceive(MFRC522->SPI, data_se, data_re, 1, 10);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6818      	ldr	r0, [r3, #0]
 8000398:	f107 0208 	add.w	r2, r7, #8
 800039c:	f107 010c 	add.w	r1, r7, #12
 80003a0:	230a      	movs	r3, #10
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2301      	movs	r3, #1
 80003a6:	f001 fbfd 	bl	8001ba4 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(MFRC522->SPI, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 80003aa:	bf00      	nop
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b8:	2b80      	cmp	r3, #128	; 0x80
 80003ba:	d0f7      	beq.n	80003ac <TM_SPI_Send+0x3a>
	return data_re[0];
 80003bc:	7a3b      	ldrb	r3, [r7, #8]

}
 80003be:	4618      	mov	r0, r3
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <MFRC522_WriteRegister>:
static void MFRC522_WriteRegister(MFRC522_Name* MFRC522, uint8_t addr, uint8_t val)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	70fb      	strb	r3, [r7, #3]
 80003d2:	4613      	mov	r3, r2
 80003d4:	70bb      	strb	r3, [r7, #2]
	//CS low
	uint8_t Address = (addr << 1) & 0x7E;
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80003e0:	73fb      	strb	r3, [r7, #15]
	MFRC522_CS(MFRC522, 0);
 80003e2:	2100      	movs	r1, #0
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f7ff ffb2 	bl	800034e <MFRC522_CS>
	//Send address
	TM_SPI_Send(MFRC522, Address);
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	4619      	mov	r1, r3
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ffbf 	bl	8000372 <TM_SPI_Send>
	//Send data
	HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fc25 	bl	8000c44 <HAL_Delay>
	TM_SPI_Send(MFRC522, val);
 80003fa:	78bb      	ldrb	r3, [r7, #2]
 80003fc:	4619      	mov	r1, r3
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f7ff ffb7 	bl	8000372 <TM_SPI_Send>
	HAL_Delay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f000 fc1d 	bl	8000c44 <HAL_Delay>
	//CS high
	MFRC522_CS(MFRC522, 1);
 800040a:	2101      	movs	r1, #1
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f7ff ff9e 	bl	800034e <MFRC522_CS>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <MFRC522_ReadRegister>:

static uint8_t MFRC522_ReadRegister(MFRC522_Name* MFRC522, uint8_t addr)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	460b      	mov	r3, r1
 8000424:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;
	uint8_t Address = ((addr << 1) & 0x7E)|0x80;
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	b25b      	sxtb	r3, r3
 800042c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000430:	b25b      	sxtb	r3, r3
 8000432:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000436:	b25b      	sxtb	r3, r3
 8000438:	73fb      	strb	r3, [r7, #15]
	//CS low
	MFRC522_CS(MFRC522, 0);
 800043a:	2100      	movs	r1, #0
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff ff86 	bl	800034e <MFRC522_CS>
	TM_SPI_Send(MFRC522, Address);
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff93 	bl	8000372 <TM_SPI_Send>
	Value = TM_SPI_Send(MFRC522, MFRC522_DUMMY);
 800044c:	2100      	movs	r1, #0
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ff8f 	bl	8000372 <TM_SPI_Send>
 8000454:	4603      	mov	r3, r0
 8000456:	73bb      	strb	r3, [r7, #14]
	//CS high
	MFRC522_CS(MFRC522, 1);
 8000458:	2101      	movs	r1, #1
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f7ff ff77 	bl	800034e <MFRC522_CS>

	return Value;
 8000460:	7bbb      	ldrb	r3, [r7, #14]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <MFRC522_SetBitMask>:

static void MFRC522_SetBitMask(MFRC522_Name* MFRC522, uint8_t reg, uint8_t mask)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	460b      	mov	r3, r1
 8000474:	70fb      	strb	r3, [r7, #3]
 8000476:	4613      	mov	r3, r2
 8000478:	70bb      	strb	r3, [r7, #2]
	MFRC522_WriteRegister(MFRC522, reg, MFRC522_ReadRegister(MFRC522, reg) | mask);
 800047a:	78fb      	ldrb	r3, [r7, #3]
 800047c:	4619      	mov	r1, r3
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ffcb 	bl	800041a <MFRC522_ReadRegister>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	78bb      	ldrb	r3, [r7, #2]
 800048a:	4313      	orrs	r3, r2
 800048c:	b2da      	uxtb	r2, r3
 800048e:	78fb      	ldrb	r3, [r7, #3]
 8000490:	4619      	mov	r1, r3
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff ff97 	bl	80003c6 <MFRC522_WriteRegister>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <MFRC522_ClearBitMask>:

static void MFRC522_ClearBitMask(MFRC522_Name* MFRC522, uint8_t reg, uint8_t mask)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
 80004ac:	4613      	mov	r3, r2
 80004ae:	70bb      	strb	r3, [r7, #2]
	MFRC522_WriteRegister(MFRC522, reg, MFRC522_ReadRegister(MFRC522, reg) & (~mask));
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	4619      	mov	r1, r3
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ffb0 	bl	800041a <MFRC522_ReadRegister>
 80004ba:	4603      	mov	r3, r0
 80004bc:	b25a      	sxtb	r2, r3
 80004be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80004c2:	43db      	mvns	r3, r3
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	4013      	ands	r3, r2
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	4619      	mov	r1, r3
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff ff78 	bl	80003c6 <MFRC522_WriteRegister>
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <MFRC522_AntennaOn>:
static void MFRC522_AntennaOn(MFRC522_Name* MFRC522)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b084      	sub	sp, #16
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522, MFRC522_REG_TX_CONTROL);
 80004e6:	2114      	movs	r1, #20
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ff96 	bl	800041a <MFRC522_ReadRegister>
 80004ee:	4603      	mov	r3, r0
 80004f0:	73fb      	strb	r3, [r7, #15]
	if (!(temp & 0x03)) {
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	f003 0303 	and.w	r3, r3, #3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d104      	bne.n	8000506 <MFRC522_AntennaOn+0x28>
		MFRC522_SetBitMask(MFRC522, MFRC522_REG_TX_CONTROL, 0x03);
 80004fc:	2203      	movs	r2, #3
 80004fe:	2114      	movs	r1, #20
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f7ff ffb2 	bl	800046a <MFRC522_SetBitMask>
	}
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <MFRC522_Reset>:
{
	MFRC522_ClearBitMask(MFRC522, MFRC522_REG_TX_CONTROL, 0x03);
}

static void MFRC522_Reset(MFRC522_Name* MFRC522)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000516:	220f      	movs	r2, #15
 8000518:	2101      	movs	r1, #1
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f7ff ff53 	bl	80003c6 <MFRC522_WriteRegister>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <MFRC522_Init>:

void MFRC522_Init(MFRC522_Name* MFRC522, SPI_HandleTypeDef* SPI_In, GPIO_TypeDef*	CS_PORT, uint16_t CS_PIN)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	807b      	strh	r3, [r7, #2]
	MFRC522->SPI = SPI_In;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	601a      	str	r2, [r3, #0]
	MFRC522->CS_PORT = CS_PORT;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	605a      	str	r2, [r3, #4]
	MFRC522->CS_PIN = CS_PIN;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	887a      	ldrh	r2, [r7, #2]
 8000546:	811a      	strh	r2, [r3, #8]
	MFRC522_Reset(MFRC522);
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f7ff ffe0 	bl	800050e <MFRC522_Reset>

	MFRC522_WriteRegister(MFRC522, MFRC522_REG_T_MODE, 0x8D);
 800054e:	228d      	movs	r2, #141	; 0x8d
 8000550:	212a      	movs	r1, #42	; 0x2a
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	f7ff ff37 	bl	80003c6 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_T_PRESCALER, 0x3E);
 8000558:	223e      	movs	r2, #62	; 0x3e
 800055a:	212b      	movs	r1, #43	; 0x2b
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f7ff ff32 	bl	80003c6 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_T_RELOAD_L, 30);
 8000562:	221e      	movs	r2, #30
 8000564:	212d      	movs	r1, #45	; 0x2d
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff ff2d 	bl	80003c6 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_T_RELOAD_H, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	212c      	movs	r1, #44	; 0x2c
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f7ff ff28 	bl	80003c6 <MFRC522_WriteRegister>

	/* 48dB gain */
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_RF_CFG, 0x70);
 8000576:	2270      	movs	r2, #112	; 0x70
 8000578:	2126      	movs	r1, #38	; 0x26
 800057a:	68f8      	ldr	r0, [r7, #12]
 800057c:	f7ff ff23 	bl	80003c6 <MFRC522_WriteRegister>

	MFRC522_WriteRegister(MFRC522, MFRC522_REG_TX_AUTO, 0x40);
 8000580:	2240      	movs	r2, #64	; 0x40
 8000582:	2115      	movs	r1, #21
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f7ff ff1e 	bl	80003c6 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_MODE, 0x3D);
 800058a:	223d      	movs	r2, #61	; 0x3d
 800058c:	2111      	movs	r1, #17
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ff19 	bl	80003c6 <MFRC522_WriteRegister>

	MFRC522_AntennaOn(MFRC522);		//Open the antenna
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f7ff ffa2 	bl	80004de <MFRC522_AntennaOn>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <MFRC522_Check>:
MFRC522_Status_t MFRC522_Check(MFRC522_Name* MFRC522, uint8_t* id)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
	MFRC522_Status_t status;
	//Find cards, return card type
	status = MFRC522_Request(MFRC522, PICC_REQIDL, id);
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	2126      	movs	r1, #38	; 0x26
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f813 	bl	80005dc <MFRC522_Request>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d105      	bne.n	80005cc <MFRC522_Check+0x2a>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = MFRC522_Anticoll(MFRC522, id);
 80005c0:	6839      	ldr	r1, [r7, #0]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 f910 	bl	80007e8 <MFRC522_Anticoll>
 80005c8:	4603      	mov	r3, r0
 80005ca:	73fb      	strb	r3, [r7, #15]
	}
	MFRC522_Halt(MFRC522);			//Command card into hibernation
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f99d 	bl	800090c <MFRC522_Halt>

	return status;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <MFRC522_Request>:
		}
	}
	return MI_OK;
}
MFRC522_Status_t MFRC522_Request(MFRC522_Name* MFRC522, uint8_t reqMode, uint8_t* TagType)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	460b      	mov	r3, r1
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	72fb      	strb	r3, [r7, #11]
	MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	MFRC522_WriteRegister(MFRC522, MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80005ea:	2207      	movs	r2, #7
 80005ec:	210d      	movs	r1, #13
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f7ff fee9 	bl	80003c6 <MFRC522_WriteRegister>

	TagType[0] = reqMode;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7afa      	ldrb	r2, [r7, #11]
 80005f8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(MFRC522, PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	210c      	movs	r1, #12
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f000 f80f 	bl	800062e <MFRC522_ToCard>
 8000610:	4603      	mov	r3, r0
 8000612:	75fb      	strb	r3, [r7, #23]

	if ((status != MI_OK) || (backBits != 0x10)) {
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d102      	bne.n	8000620 <MFRC522_Request+0x44>
 800061a:	8abb      	ldrh	r3, [r7, #20]
 800061c:	2b10      	cmp	r3, #16
 800061e:	d001      	beq.n	8000624 <MFRC522_Request+0x48>
		status = MI_ERR;
 8000620:	2302      	movs	r3, #2
 8000622:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8000624:	7dfb      	ldrb	r3, [r7, #23]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <MFRC522_ToCard>:
MFRC522_Status_t MFRC522_ToCard(MFRC522_Name* MFRC522, uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen)
{
 800062e:	b590      	push	{r4, r7, lr}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	461a      	mov	r2, r3
 800063a:	460b      	mov	r3, r1
 800063c:	72fb      	strb	r3, [r7, #11]
 800063e:	4613      	mov	r3, r2
 8000640:	72bb      	strb	r3, [r7, #10]
	MFRC522_Status_t status = MI_ERR;
 8000642:	2302      	movs	r3, #2
 8000644:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000646:	2300      	movs	r3, #0
 8000648:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800064a:	2300      	movs	r3, #0
 800064c:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800064e:	7afb      	ldrb	r3, [r7, #11]
 8000650:	2b0c      	cmp	r3, #12
 8000652:	d006      	beq.n	8000662 <MFRC522_ToCard+0x34>
 8000654:	2b0e      	cmp	r3, #14
 8000656:	d109      	bne.n	800066c <MFRC522_ToCard+0x3e>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000658:	2312      	movs	r3, #18
 800065a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800065c:	2310      	movs	r3, #16
 800065e:	757b      	strb	r3, [r7, #21]
			break;
 8000660:	e005      	b.n	800066e <MFRC522_ToCard+0x40>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000662:	2377      	movs	r3, #119	; 0x77
 8000664:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000666:	2330      	movs	r3, #48	; 0x30
 8000668:	757b      	strb	r3, [r7, #21]
			break;
 800066a:	e000      	b.n	800066e <MFRC522_ToCard+0x40>
		}
		default:
			break;
 800066c:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522, MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800066e:	7dbb      	ldrb	r3, [r7, #22]
 8000670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	2102      	movs	r1, #2
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f7ff fea3 	bl	80003c6 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522, MFRC522_REG_COMM_IRQ, 0x80);
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	2104      	movs	r1, #4
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f7ff ff0b 	bl	80004a0 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522, MFRC522_REG_FIFO_LEVEL, 0x80);
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	210a      	movs	r1, #10
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff feeb 	bl	800046a <MFRC522_SetBitMask>

	MFRC522_WriteRegister(MFRC522, MFRC522_REG_COMMAND, PCD_IDLE);
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff fe94 	bl	80003c6 <MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	827b      	strh	r3, [r7, #18]
 80006a2:	e00b      	b.n	80006bc <MFRC522_ToCard+0x8e>
		MFRC522_WriteRegister(MFRC522, MFRC522_REG_FIFO_DATA, sendData[i]);
 80006a4:	8a7b      	ldrh	r3, [r7, #18]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	2109      	movs	r1, #9
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f7ff fe88 	bl	80003c6 <MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80006b6:	8a7b      	ldrh	r3, [r7, #18]
 80006b8:	3301      	adds	r3, #1
 80006ba:	827b      	strh	r3, [r7, #18]
 80006bc:	7abb      	ldrb	r3, [r7, #10]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	8a7a      	ldrh	r2, [r7, #18]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d3ee      	bcc.n	80006a4 <MFRC522_ToCard+0x76>
	}

	//Execute the command
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_COMMAND, command);
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	461a      	mov	r2, r3
 80006ca:	2101      	movs	r1, #1
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f7ff fe7a 	bl	80003c6 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	2b0c      	cmp	r3, #12
 80006d6:	d104      	bne.n	80006e2 <MFRC522_ToCard+0xb4>
		MFRC522_SetBitMask(MFRC522, MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	210d      	movs	r1, #13
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f7ff fec4 	bl	800046a <MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80006e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e6:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522, MFRC522_REG_COMM_IRQ);
 80006e8:	2104      	movs	r1, #4
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff fe95 	bl	800041a <MFRC522_ReadRegister>
 80006f0:	4603      	mov	r3, r0
 80006f2:	753b      	strb	r3, [r7, #20]
		i--;
 80006f4:	8a7b      	ldrh	r3, [r7, #18]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80006fa:	8a7b      	ldrh	r3, [r7, #18]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00a      	beq.n	8000716 <MFRC522_ToCard+0xe8>
 8000700:	7d3b      	ldrb	r3, [r7, #20]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	d105      	bne.n	8000716 <MFRC522_ToCard+0xe8>
 800070a:	7d3a      	ldrb	r2, [r7, #20]
 800070c:	7d7b      	ldrb	r3, [r7, #21]
 800070e:	4013      	ands	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0e8      	beq.n	80006e8 <MFRC522_ToCard+0xba>

	MFRC522_ClearBitMask(MFRC522, MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	210d      	movs	r1, #13
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff fec0 	bl	80004a0 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000720:	8a7b      	ldrh	r3, [r7, #18]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d05b      	beq.n	80007de <MFRC522_ToCard+0x1b0>
		if (!(MFRC522_ReadRegister(MFRC522, MFRC522_REG_ERROR) & 0x1B)) {
 8000726:	2106      	movs	r1, #6
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f7ff fe76 	bl	800041a <MFRC522_ReadRegister>
 800072e:	4603      	mov	r3, r0
 8000730:	f003 031b 	and.w	r3, r3, #27
 8000734:	2b00      	cmp	r3, #0
 8000736:	d150      	bne.n	80007da <MFRC522_ToCard+0x1ac>
			status = MI_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800073c:	7d3a      	ldrb	r2, [r7, #20]
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	4013      	ands	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MFRC522_ToCard+0x122>
				status = MI_NOTAGERR;
 800074c:	2301      	movs	r3, #1
 800074e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	2b0c      	cmp	r3, #12
 8000754:	d143      	bne.n	80007de <MFRC522_ToCard+0x1b0>
				n = MFRC522_ReadRegister(MFRC522, MFRC522_REG_FIFO_LEVEL);
 8000756:	210a      	movs	r1, #10
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f7ff fe5e 	bl	800041a <MFRC522_ReadRegister>
 800075e:	4603      	mov	r3, r0
 8000760:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522, MFRC522_REG_CONTROL) & 0x07;
 8000762:	210c      	movs	r1, #12
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff fe58 	bl	800041a <MFRC522_ReadRegister>
 800076a:	4603      	mov	r3, r0
 800076c:	f003 0307 	and.w	r3, r3, #7
 8000770:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8000772:	7c7b      	ldrb	r3, [r7, #17]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <MFRC522_ToCard+0x162>
					*backLen = (n - 1) * 8 + lastBits;
 8000778:	7d3b      	ldrb	r3, [r7, #20]
 800077a:	3b01      	subs	r3, #1
 800077c:	b29b      	uxth	r3, r3
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	b29a      	uxth	r2, r3
 8000782:	7c7b      	ldrb	r3, [r7, #17]
 8000784:	b29b      	uxth	r3, r3
 8000786:	4413      	add	r3, r2
 8000788:	b29a      	uxth	r2, r3
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078c:	801a      	strh	r2, [r3, #0]
 800078e:	e005      	b.n	800079c <MFRC522_ToCard+0x16e>
				} else {
					*backLen = n * 8;
 8000790:	7d3b      	ldrb	r3, [r7, #20]
 8000792:	b29b      	uxth	r3, r3
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b29a      	uxth	r2, r3
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 800079c:	7d3b      	ldrb	r3, [r7, #20]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <MFRC522_ToCard+0x178>
					n = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80007a6:	7d3b      	ldrb	r3, [r7, #20]
 80007a8:	2b10      	cmp	r3, #16
 80007aa:	d901      	bls.n	80007b0 <MFRC522_ToCard+0x182>
					n = MFRC522_MAX_LEN;
 80007ac:	2310      	movs	r3, #16
 80007ae:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80007b0:	2300      	movs	r3, #0
 80007b2:	827b      	strh	r3, [r7, #18]
 80007b4:	e00b      	b.n	80007ce <MFRC522_ToCard+0x1a0>
					backData[i] = MFRC522_ReadRegister(MFRC522, MFRC522_REG_FIFO_DATA);
 80007b6:	8a7b      	ldrh	r3, [r7, #18]
 80007b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ba:	18d4      	adds	r4, r2, r3
 80007bc:	2109      	movs	r1, #9
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f7ff fe2b 	bl	800041a <MFRC522_ReadRegister>
 80007c4:	4603      	mov	r3, r0
 80007c6:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80007c8:	8a7b      	ldrh	r3, [r7, #18]
 80007ca:	3301      	adds	r3, #1
 80007cc:	827b      	strh	r3, [r7, #18]
 80007ce:	7d3b      	ldrb	r3, [r7, #20]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	8a7a      	ldrh	r2, [r7, #18]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3ee      	bcc.n	80007b6 <MFRC522_ToCard+0x188>
 80007d8:	e001      	b.n	80007de <MFRC522_ToCard+0x1b0>
				}
			}
		} else {
			status = MI_ERR;
 80007da:	2302      	movs	r3, #2
 80007dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 80007de:	7dfb      	ldrb	r3, [r7, #23]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	371c      	adds	r7, #28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd90      	pop	{r4, r7, pc}

080007e8 <MFRC522_Anticoll>:

MFRC522_Status_t MFRC522_Anticoll(MFRC522_Name* MFRC522, uint8_t* serNum)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522, MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80007f6:	2200      	movs	r2, #0
 80007f8:	210d      	movs	r1, #13
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fde3 	bl	80003c6 <MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	2293      	movs	r2, #147	; 0x93
 8000804:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	2220      	movs	r2, #32
 800080c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(MFRC522, PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800080e:	f107 030a 	add.w	r3, r7, #10
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2302      	movs	r3, #2
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	210c      	movs	r1, #12
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff05 	bl	800062e <MFRC522_ToCard>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d118      	bne.n	8000860 <MFRC522_Anticoll+0x78>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	73bb      	strb	r3, [r7, #14]
 8000832:	e009      	b.n	8000848 <MFRC522_Anticoll+0x60>
			serNumCheck ^= serNum[i];
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	4413      	add	r3, r2
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	4053      	eors	r3, r2
 8000840:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	3301      	adds	r3, #1
 8000846:	73bb      	strb	r3, [r7, #14]
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d9f2      	bls.n	8000834 <MFRC522_Anticoll+0x4c>
		}
		if (serNumCheck != serNum[i]) {
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	7b7a      	ldrb	r2, [r7, #13]
 8000858:	429a      	cmp	r2, r3
 800085a:	d001      	beq.n	8000860 <MFRC522_Anticoll+0x78>
			status = MI_ERR;
 800085c:	2302      	movs	r3, #2
 800085e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(MFRC522_Name* MFRC522, uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800086a:	b590      	push	{r4, r7, lr}
 800086c:	b087      	sub	sp, #28
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4613      	mov	r3, r2
 8000878:	71fb      	strb	r3, [r7, #7]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522, MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800087a:	2204      	movs	r2, #4
 800087c:	2105      	movs	r1, #5
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fe0e 	bl	80004a0 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522, MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	210a      	movs	r1, #10
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f7ff fdee 	bl	800046a <MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	75fb      	strb	r3, [r7, #23]
 8000892:	e00b      	b.n	80008ac <MFRC522_CalculateCRC+0x42>
		MFRC522_WriteRegister(MFRC522, MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	2109      	movs	r1, #9
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fd90 	bl	80003c6 <MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	3301      	adds	r3, #1
 80008aa:	75fb      	strb	r3, [r7, #23]
 80008ac:	7dfa      	ldrb	r2, [r7, #23]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3ef      	bcc.n	8000894 <MFRC522_CalculateCRC+0x2a>
	}
	MFRC522_WriteRegister(MFRC522, MFRC522_REG_COMMAND, PCD_CALCCRC);
 80008b4:	2203      	movs	r2, #3
 80008b6:	2101      	movs	r1, #1
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f7ff fd84 	bl	80003c6 <MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80008be:	23ff      	movs	r3, #255	; 0xff
 80008c0:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522, MFRC522_REG_DIV_IRQ);
 80008c2:	2105      	movs	r1, #5
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fda8 	bl	800041a <MFRC522_ReadRegister>
 80008ca:	4603      	mov	r3, r0
 80008cc:	75bb      	strb	r3, [r7, #22]
		i--;
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d004      	beq.n	80008e4 <MFRC522_CalculateCRC+0x7a>
 80008da:	7dbb      	ldrb	r3, [r7, #22]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0ee      	beq.n	80008c2 <MFRC522_CalculateCRC+0x58>

	//Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522, MFRC522_REG_CRC_RESULT_L);
 80008e4:	2122      	movs	r1, #34	; 0x22
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff fd97 	bl	800041a <MFRC522_ReadRegister>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522, MFRC522_REG_CRC_RESULT_M);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	1c5c      	adds	r4, r3, #1
 80008f8:	2121      	movs	r1, #33	; 0x21
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff fd8d 	bl	800041a <MFRC522_ReadRegister>
 8000900:	4603      	mov	r3, r0
 8000902:	7023      	strb	r3, [r4, #0]
}
 8000904:	bf00      	nop
 8000906:	371c      	adds	r7, #28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd90      	pop	{r4, r7, pc}

0800090c <MFRC522_Halt>:

	return status;
}

void MFRC522_Halt(MFRC522_Name* MFRC522)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af02      	add	r7, sp, #8
 8000912:	6078      	str	r0, [r7, #4]
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8000914:	2350      	movs	r3, #80	; 0x50
 8000916:	723b      	strb	r3, [r7, #8]
	buff[1] = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	727b      	strb	r3, [r7, #9]
	MFRC522_CalculateCRC(MFRC522, buff, 2, &buff[2]);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	3302      	adds	r3, #2
 8000922:	f107 0108 	add.w	r1, r7, #8
 8000926:	2202      	movs	r2, #2
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff9e 	bl	800086a <MFRC522_CalculateCRC>

	MFRC522_ToCard(MFRC522, PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	f107 030e 	add.w	r3, r7, #14
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2304      	movs	r3, #4
 8000940:	210c      	movs	r1, #12
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe73 	bl	800062e <MFRC522_ToCard>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_MspInit+0x5c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x5c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_MspInit+0x60>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_MspInit+0x60>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_SPI_MspInit+0x98>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d137      	bne.n	8000a44 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <HAL_SPI_MspInit+0x9c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_SPI_MspInit+0x9c>)
 80009da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_SPI_MspInit+0x9c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_SPI_MspInit+0x9c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_SPI_MspInit+0x9c>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_SPI_MspInit+0x9c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a04:	23a0      	movs	r3, #160	; 0xa0
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <HAL_SPI_MspInit+0xa0>)
 8000a18:	f000 fabc 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4809      	ldr	r0, [pc, #36]	; (8000a54 <HAL_SPI_MspInit+0xa0>)
 8000a30:	f000 fab0 	bl	8000f94 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2023      	movs	r0, #35	; 0x23
 8000a3a:	f000 f9fe 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a3e:	2023      	movs	r0, #35	; 0x23
 8000a40:	f000 fa17 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40013000 	.word	0x40013000
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010800 	.word	0x40010800

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f8b5 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <SPI1_IRQHandler+0x10>)
 8000aae:	f001 fa1b 	bl	8001ee8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000098 	.word	0x20000098

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f001 fba6 	bl	800223c <__errno>
 8000af0:	4603      	mov	r3, r0
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <_sbrk+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20005000 	.word	0x20005000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	2000008c 	.word	0x2000008c
 8000b24:	20000110 	.word	0x20000110

08000b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5a:	f7ff ffe5 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f001 fb73 	bl	8002248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b62:	f7ff faf3 	bl	800014c <main>
  bx lr
 8000b66:	4770      	bx	lr
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b70:	080023e0 	.word	0x080023e0
  ldr r2, =_sbss
 8000b74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b78:	2000010c 	.word	0x2000010c

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x28>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x28>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f947 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fed8 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f95f 	bl	8000e8e <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f927 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x1c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x20>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <HAL_IncTick+0x20>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200000f8 	.word	0x200000f8

08000c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <HAL_GetTick+0x10>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	200000f8 	.word	0x200000f8

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff fff0 	bl	8000c30 <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffe0 	bl	8000c30 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4906      	ldr	r1, [pc, #24]	; (8000d24 <__NVIC_EnableIRQ+0x34>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff90 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff2d 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff42 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff90 	bl	8000d7c <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5f 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff35 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d005      	beq.n	8000eca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e051      	b.n	8000f6e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 020e 	bic.w	r2, r2, #14
 8000ed8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_DMA_Abort_IT+0xd0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d029      	beq.n	8000f48 <HAL_DMA_Abort_IT+0xa0>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <HAL_DMA_Abort_IT+0xd4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d022      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x9c>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_DMA_Abort_IT+0xd8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d01a      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x96>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_DMA_Abort_IT+0xdc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d012      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x90>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <HAL_DMA_Abort_IT+0xe0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00a      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x8a>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_DMA_Abort_IT+0xe4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d102      	bne.n	8000f2c <HAL_DMA_Abort_IT+0x84>
 8000f26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f2a:	e00e      	b.n	8000f4a <HAL_DMA_Abort_IT+0xa2>
 8000f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f30:	e00b      	b.n	8000f4a <HAL_DMA_Abort_IT+0xa2>
 8000f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f36:	e008      	b.n	8000f4a <HAL_DMA_Abort_IT+0xa2>
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	e005      	b.n	8000f4a <HAL_DMA_Abort_IT+0xa2>
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	e002      	b.n	8000f4a <HAL_DMA_Abort_IT+0xa2>
 8000f44:	2310      	movs	r3, #16
 8000f46:	e000      	b.n	8000f4a <HAL_DMA_Abort_IT+0xa2>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <HAL_DMA_Abort_IT+0xe8>)
 8000f4c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	4798      	blx	r3
    } 
  }
  return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020008 	.word	0x40020008
 8000f7c:	4002001c 	.word	0x4002001c
 8000f80:	40020030 	.word	0x40020030
 8000f84:	40020044 	.word	0x40020044
 8000f88:	40020058 	.word	0x40020058
 8000f8c:	4002006c 	.word	0x4002006c
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e169      	b.n	800127c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8158 	bne.w	8001276 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a9a      	ldr	r2, [pc, #616]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05e      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a98      	ldr	r2, [pc, #608]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d875      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fd6:	4a98      	ldr	r2, [pc, #608]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d058      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fdc:	4a96      	ldr	r2, [pc, #600]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d86f      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fe2:	4a96      	ldr	r2, [pc, #600]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d052      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fe8:	4a94      	ldr	r2, [pc, #592]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d869      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fee:	4a94      	ldr	r2, [pc, #592]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d04c      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000ff4:	4a92      	ldr	r2, [pc, #584]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d863      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a92      	ldr	r2, [pc, #584]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d046      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8001000:	4a90      	ldr	r2, [pc, #576]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d85d      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d82a      	bhi.n	8001060 <HAL_GPIO_Init+0xcc>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d859      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 800100e:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <HAL_GPIO_Init+0x80>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	0800108f 	.word	0x0800108f
 8001018:	08001069 	.word	0x08001069
 800101c:	0800107b 	.word	0x0800107b
 8001020:	080010bd 	.word	0x080010bd
 8001024:	080010c3 	.word	0x080010c3
 8001028:	080010c3 	.word	0x080010c3
 800102c:	080010c3 	.word	0x080010c3
 8001030:	080010c3 	.word	0x080010c3
 8001034:	080010c3 	.word	0x080010c3
 8001038:	080010c3 	.word	0x080010c3
 800103c:	080010c3 	.word	0x080010c3
 8001040:	080010c3 	.word	0x080010c3
 8001044:	080010c3 	.word	0x080010c3
 8001048:	080010c3 	.word	0x080010c3
 800104c:	080010c3 	.word	0x080010c3
 8001050:	080010c3 	.word	0x080010c3
 8001054:	080010c3 	.word	0x080010c3
 8001058:	08001071 	.word	0x08001071
 800105c:	08001085 	.word	0x08001085
 8001060:	4a79      	ldr	r2, [pc, #484]	; (8001248 <HAL_GPIO_Init+0x2b4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001066:	e02c      	b.n	80010c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e029      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	3304      	adds	r3, #4
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e024      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	3308      	adds	r3, #8
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e01f      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	330c      	adds	r3, #12
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e01a      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001096:	2304      	movs	r3, #4
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e013      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d105      	bne.n	80010b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a4:	2308      	movs	r3, #8
 80010a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	611a      	str	r2, [r3, #16]
          break;
 80010ae:	e009      	b.n	80010c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	615a      	str	r2, [r3, #20]
          break;
 80010ba:	e003      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          break;
 80010c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d801      	bhi.n	80010ce <HAL_GPIO_Init+0x13a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	e001      	b.n	80010d2 <HAL_GPIO_Init+0x13e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3304      	adds	r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d802      	bhi.n	80010e0 <HAL_GPIO_Init+0x14c>
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x152>
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3b08      	subs	r3, #8
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	210f      	movs	r1, #15
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80b1 	beq.w	8001276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <HAL_GPIO_Init+0x2b8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x2b8>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <HAL_GPIO_Init+0x2b8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a40      	ldr	r2, [pc, #256]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d013      	beq.n	8001180 <HAL_GPIO_Init+0x1ec>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3f      	ldr	r2, [pc, #252]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1e8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3e      	ldr	r2, [pc, #248]	; (800125c <HAL_GPIO_Init+0x2c8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1e4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3d      	ldr	r2, [pc, #244]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001170:	2303      	movs	r3, #3
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001174:	2304      	movs	r3, #4
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001178:	2302      	movs	r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001180:	2300      	movs	r3, #0
 8001182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001192:	492f      	ldr	r1, [pc, #188]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	492c      	ldr	r1, [pc, #176]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4928      	ldr	r1, [pc, #160]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4922      	ldr	r1, [pc, #136]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	491e      	ldr	r1, [pc, #120]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	4918      	ldr	r1, [pc, #96]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	4914      	ldr	r1, [pc, #80]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001214:	4013      	ands	r3, r2
 8001216:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d021      	beq.n	8001268 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	60cb      	str	r3, [r1, #12]
 8001230:	e021      	b.n	8001276 <HAL_GPIO_Init+0x2e2>
 8001232:	bf00      	nop
 8001234:	10320000 	.word	0x10320000
 8001238:	10310000 	.word	0x10310000
 800123c:	10220000 	.word	0x10220000
 8001240:	10210000 	.word	0x10210000
 8001244:	10120000 	.word	0x10120000
 8001248:	10110000 	.word	0x10110000
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40011000 	.word	0x40011000
 8001260:	40011400 	.word	0x40011400
 8001264:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_GPIO_Init+0x304>)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	43db      	mvns	r3, r3
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001272:	4013      	ands	r3, r2
 8001274:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	3301      	adds	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	f47f ae8e 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	372c      	adds	r7, #44	; 0x2c
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	611a      	str	r2, [r3, #16]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e26c      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8087 	beq.w	80013fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ec:	4b92      	ldr	r3, [pc, #584]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d00c      	beq.n	8001312 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f8:	4b8f      	ldr	r3, [pc, #572]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d112      	bne.n	800132a <HAL_RCC_OscConfig+0x5e>
 8001304:	4b8c      	ldr	r3, [pc, #560]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d10b      	bne.n	800132a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001312:	4b89      	ldr	r3, [pc, #548]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d06c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x12c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d168      	bne.n	80013f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e246      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001332:	d106      	bne.n	8001342 <HAL_RCC_OscConfig+0x76>
 8001334:	4b80      	ldr	r3, [pc, #512]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a7f      	ldr	r2, [pc, #508]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800133a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e02e      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b7b      	ldr	r3, [pc, #492]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7a      	ldr	r2, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b78      	ldr	r3, [pc, #480]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a77      	ldr	r2, [pc, #476]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800135c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0xbc>
 800136e:	4b72      	ldr	r3, [pc, #456]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a71      	ldr	r2, [pc, #452]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6e      	ldr	r2, [pc, #440]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001388:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a6a      	ldr	r2, [pc, #424]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a67      	ldr	r2, [pc, #412]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc42 	bl	8000c30 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc3e 	bl	8000c30 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1fa      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe4>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc2e 	bl	8000c30 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc2a 	bl	8000c30 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1e6      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x10c>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001406:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b08      	cmp	r3, #8
 800141c:	d11c      	bne.n	8001458 <HAL_RCC_OscConfig+0x18c>
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x176>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e1ba      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4939      	ldr	r1, [pc, #228]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	e03a      	b.n	80014ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_RCC_OscConfig+0x270>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fbe3 	bl	8000c30 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fbdf 	bl	8000c30 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e19b      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4927      	ldr	r1, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_RCC_OscConfig+0x270>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fbc2 	bl	8000c30 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fbbe 	bl	8000c30 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e17a      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d03a      	beq.n	8001550 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d019      	beq.n	8001516 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_RCC_OscConfig+0x274>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fba2 	bl	8000c30 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb9e 	bl	8000c30 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e15a      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f000 faa6 	bl	8001a60 <RCC_Delay>
 8001514:	e01c      	b.n	8001550 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_RCC_OscConfig+0x274>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151c:	f7ff fb88 	bl	8000c30 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001522:	e00f      	b.n	8001544 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fb84 	bl	8000c30 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d908      	bls.n	8001544 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e140      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	42420000 	.word	0x42420000
 8001540:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b9e      	ldr	r3, [pc, #632]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e9      	bne.n	8001524 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a6 	beq.w	80016aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b97      	ldr	r3, [pc, #604]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10d      	bne.n	800158a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a93      	ldr	r2, [pc, #588]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b91      	ldr	r3, [pc, #580]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b8e      	ldr	r3, [pc, #568]	; (80017c4 <HAL_RCC_OscConfig+0x4f8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <HAL_RCC_OscConfig+0x4f8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a8a      	ldr	r2, [pc, #552]	; (80017c4 <HAL_RCC_OscConfig+0x4f8>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb45 	bl	8000c30 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015aa:	f7ff fb41 	bl	8000c30 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b64      	cmp	r3, #100	; 0x64
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0fd      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x312>
 80015d0:	4b7b      	ldr	r3, [pc, #492]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4a7a      	ldr	r2, [pc, #488]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	e02d      	b.n	800163a <HAL_RCC_OscConfig+0x36e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x334>
 80015e6:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a75      	ldr	r2, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	e01c      	b.n	800163a <HAL_RCC_OscConfig+0x36e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d10c      	bne.n	8001622 <HAL_RCC_OscConfig+0x356>
 8001608:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a6c      	ldr	r2, [pc, #432]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a69      	ldr	r2, [pc, #420]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	e00b      	b.n	800163a <HAL_RCC_OscConfig+0x36e>
 8001622:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a66      	ldr	r2, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	4b64      	ldr	r3, [pc, #400]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a63      	ldr	r2, [pc, #396]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d015      	beq.n	800166e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff faf5 	bl	8000c30 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff faf1 	bl	8000c30 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	; 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e0ab      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0ee      	beq.n	800164a <HAL_RCC_OscConfig+0x37e>
 800166c:	e014      	b.n	8001698 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff fadf 	bl	8000c30 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fadb 	bl	8000c30 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e095      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ee      	bne.n	8001676 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d105      	bne.n	80016aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8081 	beq.w	80017b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d061      	beq.n	8001784 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d146      	bne.n	8001756 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_RCC_OscConfig+0x4fc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff faaf 	bl	8000c30 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff faab 	bl	8000c30 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e067      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	492d      	ldr	r1, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a19      	ldr	r1, [r3, #32]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	430b      	orrs	r3, r1
 8001722:	4927      	ldr	r1, [pc, #156]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_RCC_OscConfig+0x4fc>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fa7f 	bl	8000c30 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fa7b 	bl	8000c30 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e037      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x46a>
 8001754:	e02f      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_RCC_OscConfig+0x4fc>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fa68 	bl	8000c30 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff fa64 	bl	8000c30 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e020      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x498>
 8001782:	e018      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e013      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
 80017c8:	42420060 	.word	0x42420060

080017cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0d0      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b67      	ldr	r3, [pc, #412]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0207 	bic.w	r2, r3, #7
 80017f6:	4965      	ldr	r1, [pc, #404]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001832:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800184a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d040      	beq.n	80018ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e073      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06b      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4936      	ldr	r1, [pc, #216]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff f9b8 	bl	8000c30 <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f9b4 	bl	8000c30 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e053      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d210      	bcs.n	800191c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4922      	ldr	r1, [pc, #136]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f821 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x1cc>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1d0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f916 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000
 8001990:	40021000 	.word	0x40021000
 8001994:	080023c8 	.word	0x080023c8
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	b490      	push	{r4, r7}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019a8:	1d3c      	adds	r4, r7, #4
 80019aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019b0:	f240 2301 	movw	r3, #513	; 0x201
 80019b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x40>
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x46>
 80019de:	e02d      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e2:	623b      	str	r3, [r7, #32]
      break;
 80019e4:	e02d      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	0c9b      	lsrs	r3, r3, #18
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019f2:	4413      	add	r3, r2
 80019f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	0c5b      	lsrs	r3, r3, #17
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a12:	4413      	add	r3, r2
 8001a14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1e:	fb02 f203 	mul.w	r2, r2, r3
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	e004      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	623b      	str	r3, [r7, #32]
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3e:	623b      	str	r3, [r7, #32]
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	6a3b      	ldr	r3, [r7, #32]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc90      	pop	{r4, r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	080023b8 	.word	0x080023b8
 8001a54:	40021000 	.word	0x40021000
 8001a58:	007a1200 	.word	0x007a1200
 8001a5c:	003d0900 	.word	0x003d0900

08001a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <RCC_Delay+0x34>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <RCC_Delay+0x38>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0a5b      	lsrs	r3, r3, #9
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a7c:	bf00      	nop
  }
  while (Delay --);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	60fa      	str	r2, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f9      	bne.n	8001a7c <RCC_Delay+0x1c>
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	20000000 	.word	0x20000000
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e076      	b.n	8001b9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001abe:	d009      	beq.n	8001ad4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
 8001ac6:	e005      	b.n	8001ad4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7fe ff60 	bl	80009b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b58:	ea42 0103 	orr.w	r1, r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	0c1a      	lsrs	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f002 0204 	and.w	r2, r2, #4
 8001b7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_SPI_TransmitReceive+0x26>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e18a      	b.n	8001ee0 <HAL_SPI_TransmitReceive+0x33c>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bd2:	f7ff f82d 	bl	8000c30 <HAL_GetTick>
 8001bd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d00f      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0x70>
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bfa:	d107      	bne.n	8001c0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <HAL_SPI_TransmitReceive+0x68>
 8001c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d003      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c12:	e15b      	b.n	8001ecc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_SPI_TransmitReceive+0x82>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_SPI_TransmitReceive+0x82>
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c2c:	e14e      	b.n	8001ecc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d003      	beq.n	8001c42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	887a      	ldrh	r2, [r7, #2]
 8001c52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b40      	cmp	r3, #64	; 0x40
 8001c84:	d007      	beq.n	8001c96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9e:	d178      	bne.n	8001d92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_SPI_TransmitReceive+0x10a>
 8001ca8:	8b7b      	ldrh	r3, [r7, #26]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d166      	bne.n	8001d7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	1c9a      	adds	r2, r3, #2
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd2:	e053      	b.n	8001d7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d11b      	bne.n	8001d1a <HAL_SPI_TransmitReceive+0x176>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d016      	beq.n	8001d1a <HAL_SPI_TransmitReceive+0x176>
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d113      	bne.n	8001d1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	1c9a      	adds	r2, r3, #2
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d119      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x1b8>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d014      	beq.n	8001d5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	1c9a      	adds	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d5c:	f7fe ff68 	bl	8000c30 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d807      	bhi.n	8001d7c <HAL_SPI_TransmitReceive+0x1d8>
 8001d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d003      	beq.n	8001d7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d7a:	e0a7      	b.n	8001ecc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1a6      	bne.n	8001cd4 <HAL_SPI_TransmitReceive+0x130>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1a1      	bne.n	8001cd4 <HAL_SPI_TransmitReceive+0x130>
 8001d90:	e07c      	b.n	8001e8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x1fc>
 8001d9a:	8b7b      	ldrh	r3, [r7, #26]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d16b      	bne.n	8001e78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	330c      	adds	r3, #12
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dc6:	e057      	b.n	8001e78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d11c      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x26c>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d017      	beq.n	8001e10 <HAL_SPI_TransmitReceive+0x26c>
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d114      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d119      	bne.n	8001e52 <HAL_SPI_TransmitReceive+0x2ae>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d014      	beq.n	8001e52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e52:	f7fe feed 	bl	8000c30 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d803      	bhi.n	8001e6a <HAL_SPI_TransmitReceive+0x2c6>
 8001e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d102      	bne.n	8001e70 <HAL_SPI_TransmitReceive+0x2cc>
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d103      	bne.n	8001e78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e76:	e029      	b.n	8001ecc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1a2      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x224>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d19d      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f9b5 	bl	8002200 <SPI_EndRxTxTransaction>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001ea8:	e010      	b.n	8001ecc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10b      	bne.n	8001eca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	e000      	b.n	8001ecc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
    return;
 8001f2a:	e0be      	b.n	80020aa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	085b      	lsrs	r3, r3, #1
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_SPI_IRQHandler+0x66>
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	09db      	lsrs	r3, r3, #7
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
    return;
 8001f4c:	e0ad      	b.n	80020aa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_SPI_IRQHandler+0x80>
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80a1 	beq.w	80020aa <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 809a 	beq.w	80020aa <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d023      	beq.n	8001fca <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d011      	beq.n	8001fb2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	e00b      	b.n	8001fca <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]
        return;
 8001fc8:	e06f      	b.n	80020aa <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d014      	beq.n	8002000 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	2b00      	cmp	r3, #0
 8002006:	d04f      	beq.n	80020a8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002016:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <HAL_SPI_IRQHandler+0x14c>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d034      	beq.n	800209e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0203 	bic.w	r2, r2, #3
 8002042:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d011      	beq.n	8002070 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_SPI_IRQHandler+0x1c8>)
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ff25 	bl	8000ea8 <HAL_DMA_Abort_IT>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <HAL_SPI_IRQHandler+0x1c8>)
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe ff0f 	bl	8000ea8 <HAL_DMA_Abort_IT>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800209c:	e003      	b.n	80020a6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f808 	bl	80020b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80020a4:	e000      	b.n	80020a8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80020a6:	bf00      	nop
    return;
 80020a8:	bf00      	nop
  }
}
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	080020c7 	.word	0x080020c7

080020b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff ffe7 	bl	80020b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002100:	f7fe fd96 	bl	8000c30 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4413      	add	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002110:	f7fe fd8e 	bl	8000c30 <HAL_GetTick>
 8002114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	015b      	lsls	r3, r3, #5
 800211c:	0d1b      	lsrs	r3, r3, #20
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002126:	e054      	b.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d050      	beq.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002130:	f7fe fd7e 	bl	8000c30 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	429a      	cmp	r2, r3
 800213e:	d902      	bls.n	8002146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d13d      	bne.n	80021c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215e:	d111      	bne.n	8002184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002168:	d004      	beq.n	8002174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	d107      	bne.n	8002184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218c:	d10f      	bne.n	80021ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e017      	b.n	80021f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4013      	ands	r3, r2
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	429a      	cmp	r2, r3
 80021e0:	bf0c      	ite	eq
 80021e2:	2301      	moveq	r3, #1
 80021e4:	2300      	movne	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d19b      	bne.n	8002128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000

08002200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff ff6a 	bl	80020f0 <SPI_WaitFlagStateUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e000      	b.n	8002234 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <__errno>:
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <__errno+0x8>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	2000000c 	.word	0x2000000c

08002248 <__libc_init_array>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	2600      	movs	r6, #0
 800224c:	4d0c      	ldr	r5, [pc, #48]	; (8002280 <__libc_init_array+0x38>)
 800224e:	4c0d      	ldr	r4, [pc, #52]	; (8002284 <__libc_init_array+0x3c>)
 8002250:	1b64      	subs	r4, r4, r5
 8002252:	10a4      	asrs	r4, r4, #2
 8002254:	42a6      	cmp	r6, r4
 8002256:	d109      	bne.n	800226c <__libc_init_array+0x24>
 8002258:	f000 f8a2 	bl	80023a0 <_init>
 800225c:	2600      	movs	r6, #0
 800225e:	4d0a      	ldr	r5, [pc, #40]	; (8002288 <__libc_init_array+0x40>)
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <__libc_init_array+0x44>)
 8002262:	1b64      	subs	r4, r4, r5
 8002264:	10a4      	asrs	r4, r4, #2
 8002266:	42a6      	cmp	r6, r4
 8002268:	d105      	bne.n	8002276 <__libc_init_array+0x2e>
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002270:	4798      	blx	r3
 8002272:	3601      	adds	r6, #1
 8002274:	e7ee      	b.n	8002254 <__libc_init_array+0xc>
 8002276:	f855 3b04 	ldr.w	r3, [r5], #4
 800227a:	4798      	blx	r3
 800227c:	3601      	adds	r6, #1
 800227e:	e7f2      	b.n	8002266 <__libc_init_array+0x1e>
 8002280:	080023d8 	.word	0x080023d8
 8002284:	080023d8 	.word	0x080023d8
 8002288:	080023d8 	.word	0x080023d8
 800228c:	080023dc 	.word	0x080023dc

08002290 <malloc>:
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <malloc+0xc>)
 8002292:	4601      	mov	r1, r0
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	f000 b80b 	b.w	80022b0 <_malloc_r>
 800229a:	bf00      	nop
 800229c:	2000000c 	.word	0x2000000c

080022a0 <memset>:
 80022a0:	4603      	mov	r3, r0
 80022a2:	4402      	add	r2, r0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	f803 1b01 	strb.w	r1, [r3], #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <_malloc_r>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	1ccd      	adds	r5, r1, #3
 80022b4:	f025 0503 	bic.w	r5, r5, #3
 80022b8:	3508      	adds	r5, #8
 80022ba:	2d0c      	cmp	r5, #12
 80022bc:	bf38      	it	cc
 80022be:	250c      	movcc	r5, #12
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	4606      	mov	r6, r0
 80022c4:	db01      	blt.n	80022ca <_malloc_r+0x1a>
 80022c6:	42a9      	cmp	r1, r5
 80022c8:	d903      	bls.n	80022d2 <_malloc_r+0x22>
 80022ca:	230c      	movs	r3, #12
 80022cc:	6033      	str	r3, [r6, #0]
 80022ce:	2000      	movs	r0, #0
 80022d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d2:	f000 f857 	bl	8002384 <__malloc_lock>
 80022d6:	4921      	ldr	r1, [pc, #132]	; (800235c <_malloc_r+0xac>)
 80022d8:	680a      	ldr	r2, [r1, #0]
 80022da:	4614      	mov	r4, r2
 80022dc:	b99c      	cbnz	r4, 8002306 <_malloc_r+0x56>
 80022de:	4f20      	ldr	r7, [pc, #128]	; (8002360 <_malloc_r+0xb0>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b923      	cbnz	r3, 80022ee <_malloc_r+0x3e>
 80022e4:	4621      	mov	r1, r4
 80022e6:	4630      	mov	r0, r6
 80022e8:	f000 f83c 	bl	8002364 <_sbrk_r>
 80022ec:	6038      	str	r0, [r7, #0]
 80022ee:	4629      	mov	r1, r5
 80022f0:	4630      	mov	r0, r6
 80022f2:	f000 f837 	bl	8002364 <_sbrk_r>
 80022f6:	1c43      	adds	r3, r0, #1
 80022f8:	d123      	bne.n	8002342 <_malloc_r+0x92>
 80022fa:	230c      	movs	r3, #12
 80022fc:	4630      	mov	r0, r6
 80022fe:	6033      	str	r3, [r6, #0]
 8002300:	f000 f846 	bl	8002390 <__malloc_unlock>
 8002304:	e7e3      	b.n	80022ce <_malloc_r+0x1e>
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	1b5b      	subs	r3, r3, r5
 800230a:	d417      	bmi.n	800233c <_malloc_r+0x8c>
 800230c:	2b0b      	cmp	r3, #11
 800230e:	d903      	bls.n	8002318 <_malloc_r+0x68>
 8002310:	6023      	str	r3, [r4, #0]
 8002312:	441c      	add	r4, r3
 8002314:	6025      	str	r5, [r4, #0]
 8002316:	e004      	b.n	8002322 <_malloc_r+0x72>
 8002318:	6863      	ldr	r3, [r4, #4]
 800231a:	42a2      	cmp	r2, r4
 800231c:	bf0c      	ite	eq
 800231e:	600b      	streq	r3, [r1, #0]
 8002320:	6053      	strne	r3, [r2, #4]
 8002322:	4630      	mov	r0, r6
 8002324:	f000 f834 	bl	8002390 <__malloc_unlock>
 8002328:	f104 000b 	add.w	r0, r4, #11
 800232c:	1d23      	adds	r3, r4, #4
 800232e:	f020 0007 	bic.w	r0, r0, #7
 8002332:	1ac2      	subs	r2, r0, r3
 8002334:	d0cc      	beq.n	80022d0 <_malloc_r+0x20>
 8002336:	1a1b      	subs	r3, r3, r0
 8002338:	50a3      	str	r3, [r4, r2]
 800233a:	e7c9      	b.n	80022d0 <_malloc_r+0x20>
 800233c:	4622      	mov	r2, r4
 800233e:	6864      	ldr	r4, [r4, #4]
 8002340:	e7cc      	b.n	80022dc <_malloc_r+0x2c>
 8002342:	1cc4      	adds	r4, r0, #3
 8002344:	f024 0403 	bic.w	r4, r4, #3
 8002348:	42a0      	cmp	r0, r4
 800234a:	d0e3      	beq.n	8002314 <_malloc_r+0x64>
 800234c:	1a21      	subs	r1, r4, r0
 800234e:	4630      	mov	r0, r6
 8002350:	f000 f808 	bl	8002364 <_sbrk_r>
 8002354:	3001      	adds	r0, #1
 8002356:	d1dd      	bne.n	8002314 <_malloc_r+0x64>
 8002358:	e7cf      	b.n	80022fa <_malloc_r+0x4a>
 800235a:	bf00      	nop
 800235c:	20000090 	.word	0x20000090
 8002360:	20000094 	.word	0x20000094

08002364 <_sbrk_r>:
 8002364:	b538      	push	{r3, r4, r5, lr}
 8002366:	2300      	movs	r3, #0
 8002368:	4d05      	ldr	r5, [pc, #20]	; (8002380 <_sbrk_r+0x1c>)
 800236a:	4604      	mov	r4, r0
 800236c:	4608      	mov	r0, r1
 800236e:	602b      	str	r3, [r5, #0]
 8002370:	f7fe fba4 	bl	8000abc <_sbrk>
 8002374:	1c43      	adds	r3, r0, #1
 8002376:	d102      	bne.n	800237e <_sbrk_r+0x1a>
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	b103      	cbz	r3, 800237e <_sbrk_r+0x1a>
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	200000fc 	.word	0x200000fc

08002384 <__malloc_lock>:
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <__malloc_lock+0x8>)
 8002386:	f000 b809 	b.w	800239c <__retarget_lock_acquire_recursive>
 800238a:	bf00      	nop
 800238c:	20000104 	.word	0x20000104

08002390 <__malloc_unlock>:
 8002390:	4801      	ldr	r0, [pc, #4]	; (8002398 <__malloc_unlock+0x8>)
 8002392:	f000 b804 	b.w	800239e <__retarget_lock_release_recursive>
 8002396:	bf00      	nop
 8002398:	20000104 	.word	0x20000104

0800239c <__retarget_lock_acquire_recursive>:
 800239c:	4770      	bx	lr

0800239e <__retarget_lock_release_recursive>:
 800239e:	4770      	bx	lr

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
